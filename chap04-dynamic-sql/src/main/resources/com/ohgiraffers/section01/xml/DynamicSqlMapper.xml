<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.xml.DynamicSqlMapper">

    <resultMap id="menuResultMap" type="com.ohgiraffers.common.MenuDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>

    <!-- <if> 태그 : test 속성의 조건에 해당할 때만 엘리먼트 구문을 쿼리에 포함한다.   -->
    <select id="selectMenuByPrice" resultMap="menuResultMap" parameterType="hashmap">
        SELECT
        MENU_CODE,
        MENU_NAME,
        MENU_PRICE,
        CATEGORY_CODE,
        ORDERABLE_STATUS
        FROM TBL_MENU
        WHERE ORDERABLE_STATUS = 'Y'
        <if test="price gte 0 and price lte 10000">
            <![CDATA[
                AND MENU_PRICE < #{price}
            ]]>
        </if>
        <if test="price gt 10000 and price lte 20000">
            AND MENU_PRICE BETWEEN 10000 AND #{price}
        </if>
        <if test="price gt 20000 and price lte 30000">
            AND MENU_PRICE BETWEEN 20000 AND #{price}
        </if>
        <if test="price gt 30000">
            AND MENU_PRICE BETWEEN 30000 AND #{price}
        </if>


    </select>



    <select id="searchMenu" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
        A.MENU_CODE,
        A.MENU_NAME,
        A.MENU_PRICE,
        A.CATEGORY_CODE,
        A.ORDERABLE_STATUS
        FROM TBL_MENU A
        <if test="condition == 'category'">
            JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
        </if>
        WHERE A.ORDERABLE_STATUS = 'Y'
        <if test="condition == 'name'">
            AND A.MENU_NAME LIKE CONCAT ('%' , #{value}, '%')
        </if>
        <if test="condition =='category'">
            AND B.CATEGORY_NAME = #{value}
        </if>
    </select>

    <!-- <choose> 태그 : 자바의 switch-case 문 역할을 한다.-->
    <!--
        <choose>
            <when test = 조건>
                쿼리구문
            </when>
            ...
            <otherwise>
                쿼리구문
            </otherwise>
            어떠한 when 조건도 충족하지 못하면 otherwise 구문을 쿼리에 포함한다.
     -->
    <select id="searchMenuBySupCategory" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
        A.MENU_CODE,
        A.MENU_NAME,
        A.MENU_PRICE,
        A.CATEGORY_CODE,
        A.ORDERABLE_STATUS
        FROM TBL_MENU A
        JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
        WHERE A.ORDERABLE_STATUS = 'Y'
        <choose>
            <when test="value == '식사'">
                AND B.REF_CATEGORY_CODE = 1
            </when>
            <when test="value == '음료'">
                AND B.REF_CATEGORY_CODE = 2
            </when>
            <otherwise>
                AND B.REF_CATEGORY_CODE = 3
            </otherwise>
        </choose>
    </select>

    <!--  <foreach> 태그 : 자바의 for 문 역할을 한다.
            1. collection 속성 : 반복을 수행할 대상
            2. item 속성 : 반복을 수행할 때 마다 꺼내올 값의 이름 설정
            3. open 속성 : foreach 엘리먼트 구문의 가장 앞에 올 문자
            4. separator 속성 : 반복이 수행될 때 꺼내온 item 사이에 들어갈 문자
            5. close 속성 : 구문의 가장 마지막에 올 문자
       -->
    <select id="searchMenuByRandomMenuCode" parameterType="hashmap" resultMap="menuResultMap">
        SELECT
        MENU_CODE,
        MENU_NAME,
        MENU_PRICE,
        CATEGORY_CODE,
        ORDERABLE_STATUS
        FROM TBL_MENU
        WHERE ORDERABLE_STATUS = 'Y'
        AND MENU_CODE IN
        <foreach collection="randomMenuCodeList" item="menuCode" open="(" separator=", " close=")">
            #{menuCode}
        </foreach>
    </select>

    <select id="searchMenuByCodeOrSearchAll" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT
        MENU_CODE,
        MENU_NAME,
        MENU_PRICE,
        CATEGORY_CODE,
        ORDERABLE_STATUS
        FROM TBL_MENU
        <if test="condition != null and condition eq 'menuCode'">
            WHERE MENU_CODE = #{value}
        </if>
    </select>

    <!--
        <where> 태그 : 엘리먼트 구문이 where 로 시작하지 않으면 자동으로 where 을 붙여준다.
                        또한 where 엘리먼트 내부에 모두 쿼리문이 추가되지 않은 상황인 경우
                        where 을 무시한다.
                        단, name 부분에 where 을 배주지 않으면 where where 로
                        where 이 2개 생성될 수 있다.
        <trim> 태그 : 조회 조건에 AND 혹은 OR로 시작하지 않는 다은 문자로 시작하는 경우 등
                        where 엘리먼트가 기본적으로 처리하는 기능에 추가 규칙을 정의하기 위해
                        trim을 제공한다.
                        1. prefix 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여주는 내용 기술
                        2. prefixOverrides 속성 : 처리 후 엘리먼트의 내용 중 가장 앞에 속성값에
                                                해당하는 문자를 자동으로 삭제
                        3. suffix 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 뒤에 붙여주는 내용 기줄
                        4. suffixOverrides 속성 : 처리 후 엘리먼트의 내용 중 가장 뒤에
                                                 속성값에 해당하는 문자를 자동 삭제
    -->

    <select id="searchMenuByNameOrCategory" parameterType="hashMap" resultMap="menuResultMap">
        SELECT
            MENU_CODE,
            MENU_NAME,
            MENU_PRICE,
            CATEGORY_CODE,
            ORDERABLE_STATUS
          FROM TBL_MENU
<!--        <if test="nameValue != null">-->
<!--            WHERE MENU_NAME LIKE CONCAT ('%', #{nameValue}, '%')-->
<!--        </if>-->
<!--        <if test="categoryValue != null">-->
<!--            AND CATEGORY_CODE = #{categoryValue}-->
<!--        </if>-->
            <!--1. where 태그 이용-->
<!--            <where>-->
<!--                <if test="nameValue != null">-->
<!--                    WHERE MENU_NAME LIKE CONCAT ('%', #{nameValue}, '%')-->
<!--                </if>-->
<!--                <if test="categoryValue != null">-->
<!--                    AND CATEGORY_CODE = #{categoryValue}-->
<!--                </if>-->
<!--            </where>-->
            <!--2. trim 태그 이용-->
<!--        <trim prefix="WHERE" prefixOverrides="AND | OR">-->
<!--            <if test="nameValue != null">-->
<!--                WHERE MENU_NAME LIKE CONCAT ('%', #{nameValue}, '%')-->
<!--            </if>-->
<!--            <if test="categoryValue != null">-->
<!--                AND CATEGORY_CODE = #{categoryValue}-->
<!--            </if>-->
<!--        </trim>-->
            <!--추가 : bind 태그 : 변수를 만들어서 바인딩 시킨다.
            _parameter 가 전달된 Object 를 의미하며, conllection 인 경우 get, Object 인 경우 getter
            -->
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="nameValue != null">
                <bind name="namePattern" value="'%' + _parameter.get('nameValue') + '%'"/>
                MENU_NAME LIKE #{namePattern}
            </if>
            <if test="categoryValue != null">
                AND CATEGORY_CODE = #{categoryValue}
            </if>
        </trim>
    </select>



</mapper>